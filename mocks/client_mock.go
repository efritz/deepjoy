// Code generated by github.com/efritz/go-mockgen; DO NOT EDIT.
// This file was generated by robots at
// 2018-10-23T15:57:11-05:00
// using the command
// $ go-mockgen -f github.com/efritz/deepjoy/iface

package mocks

import iface "github.com/efritz/deepjoy/iface"

// MockClient is a mock impelementation of the Client interface (from the
// package github.com/efritz/deepjoy/iface) used for unit testing.
type MockClient struct {
	// CloseFunc is an instance of a mock function object controlling the
	// behavior of the method Close.
	CloseFunc *ClientCloseFunc
	// DoFunc is an instance of a mock function object controlling the
	// behavior of the method Do.
	DoFunc *ClientDoFunc
	// PipelineFunc is an instance of a mock function object controlling the
	// behavior of the method Pipeline.
	PipelineFunc *ClientPipelineFunc
	// ReadReplicaFunc is an instance of a mock function object controlling
	// the behavior of the method ReadReplica.
	ReadReplicaFunc *ClientReadReplicaFunc
}

// NewMockClient creates a new mock of the Client interface. All methods
// return zero values for all results, unless overwritten.
func NewMockClient() *MockClient {
	return &MockClient{
		CloseFunc: &ClientCloseFunc{
			defaultHook: func() {
				return
			},
		},
		DoFunc: &ClientDoFunc{
			defaultHook: func(string, ...interface{}) (interface{}, error) {
				return nil, nil
			},
		},
		PipelineFunc: &ClientPipelineFunc{
			defaultHook: func() iface.Pipeline {
				return nil
			},
		},
		ReadReplicaFunc: &ClientReadReplicaFunc{
			defaultHook: func() iface.Client {
				return nil
			},
		},
	}
}

// NewMockClientFrom creates a new mock of the MockClient interface. All
// methods delegate to the given implementation, unless overwritten.
func NewMockClientFrom(i iface.Client) *MockClient {
	return &MockClient{
		CloseFunc: &ClientCloseFunc{
			defaultHook: i.Close,
		},
		DoFunc: &ClientDoFunc{
			defaultHook: i.Do,
		},
		PipelineFunc: &ClientPipelineFunc{
			defaultHook: i.Pipeline,
		},
		ReadReplicaFunc: &ClientReadReplicaFunc{
			defaultHook: i.ReadReplica,
		},
	}
}

// ClientCloseFunc describes the behavior when the Close method of the
// parent MockClient instance is invoked.
type ClientCloseFunc struct {
	defaultHook func()
	hooks       []func()
	history     []ClientCloseFuncCall
}

// Close delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockClient) Close() {
	m.CloseFunc.nextHook()()
	m.CloseFunc.history = append(m.CloseFunc.history, ClientCloseFuncCall{})
	return
}

// SetDefaultHook sets function that is called when the Close method of the
// parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientCloseFunc) SetDefaultHook(hook func()) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Close method of the parent MockClient instance inovkes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *ClientCloseFunc) PushHook(hook func()) {
	f.hooks = append(f.hooks, hook)
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ClientCloseFunc) SetDefaultReturn() {
	f.SetDefaultHook(func() {
		return
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ClientCloseFunc) PushReturn() {
	f.PushHook(func() {
		return
	})
}

func (f *ClientCloseFunc) nextHook() func() {
	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

// History returns a sequence of ClientCloseFuncCall objects describing the
// invocations of this function.
func (f *ClientCloseFunc) History() []ClientCloseFuncCall {
	return f.history
}

// ClientCloseFuncCall is an object that describes an invocation of method
// Close on an instance of MockClient.
type ClientCloseFuncCall struct{}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientCloseFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientCloseFuncCall) Results() []interface{} {
	return []interface{}{}
}

// ClientDoFunc describes the behavior when the Do method of the parent
// MockClient instance is invoked.
type ClientDoFunc struct {
	defaultHook func(string, ...interface{}) (interface{}, error)
	hooks       []func(string, ...interface{}) (interface{}, error)
	history     []ClientDoFuncCall
}

// Do delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockClient) Do(v0 string, v1 ...interface{}) (interface{}, error) {
	r0, r1 := m.DoFunc.nextHook()(v0, v1...)
	m.DoFunc.history = append(m.DoFunc.history, ClientDoFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Do method of the
// parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientDoFunc) SetDefaultHook(hook func(string, ...interface{}) (interface{}, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Do method of the parent MockClient instance inovkes the hook at the front
// of the queue and discards it. After the queue is empty, the default hook
// function is invoked for any future action.
func (f *ClientDoFunc) PushHook(hook func(string, ...interface{}) (interface{}, error)) {
	f.hooks = append(f.hooks, hook)
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ClientDoFunc) SetDefaultReturn(r0 interface{}, r1 error) {
	f.SetDefaultHook(func(string, ...interface{}) (interface{}, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ClientDoFunc) PushReturn(r0 interface{}, r1 error) {
	f.PushHook(func(string, ...interface{}) (interface{}, error) {
		return r0, r1
	})
}

func (f *ClientDoFunc) nextHook() func(string, ...interface{}) (interface{}, error) {
	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

// History returns a sequence of ClientDoFuncCall objects describing the
// invocations of this function.
func (f *ClientDoFunc) History() []ClientDoFuncCall {
	return f.history
}

// ClientDoFuncCall is an object that describes an invocation of method Do
// on an instance of MockClient.
type ClientDoFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []interface{}
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 interface{}
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c ClientDoFuncCall) Args() []interface{} {
	return append([]interface{}{c.Arg0}, c.Arg1...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientDoFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ClientPipelineFunc describes the behavior when the Pipeline method of the
// parent MockClient instance is invoked.
type ClientPipelineFunc struct {
	defaultHook func() iface.Pipeline
	hooks       []func() iface.Pipeline
	history     []ClientPipelineFuncCall
}

// Pipeline delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockClient) Pipeline() iface.Pipeline {
	r0 := m.PipelineFunc.nextHook()()
	m.PipelineFunc.history = append(m.PipelineFunc.history, ClientPipelineFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Pipeline method of
// the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientPipelineFunc) SetDefaultHook(hook func() iface.Pipeline) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Pipeline method of the parent MockClient instance inovkes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *ClientPipelineFunc) PushHook(hook func() iface.Pipeline) {
	f.hooks = append(f.hooks, hook)
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ClientPipelineFunc) SetDefaultReturn(r0 iface.Pipeline) {
	f.SetDefaultHook(func() iface.Pipeline {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ClientPipelineFunc) PushReturn(r0 iface.Pipeline) {
	f.PushHook(func() iface.Pipeline {
		return r0
	})
}

func (f *ClientPipelineFunc) nextHook() func() iface.Pipeline {
	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

// History returns a sequence of ClientPipelineFuncCall objects describing
// the invocations of this function.
func (f *ClientPipelineFunc) History() []ClientPipelineFuncCall {
	return f.history
}

// ClientPipelineFuncCall is an object that describes an invocation of
// method Pipeline on an instance of MockClient.
type ClientPipelineFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 iface.Pipeline
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientPipelineFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientPipelineFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ClientReadReplicaFunc describes the behavior when the ReadReplica method
// of the parent MockClient instance is invoked.
type ClientReadReplicaFunc struct {
	defaultHook func() iface.Client
	hooks       []func() iface.Client
	history     []ClientReadReplicaFuncCall
}

// ReadReplica delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockClient) ReadReplica() iface.Client {
	r0 := m.ReadReplicaFunc.nextHook()()
	m.ReadReplicaFunc.history = append(m.ReadReplicaFunc.history, ClientReadReplicaFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the ReadReplica method
// of the parent MockClient instance is invoked and the hook queue is empty.
func (f *ClientReadReplicaFunc) SetDefaultHook(hook func() iface.Client) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ReadReplica method of the parent MockClient instance inovkes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ClientReadReplicaFunc) PushHook(hook func() iface.Client) {
	f.hooks = append(f.hooks, hook)
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ClientReadReplicaFunc) SetDefaultReturn(r0 iface.Client) {
	f.SetDefaultHook(func() iface.Client {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ClientReadReplicaFunc) PushReturn(r0 iface.Client) {
	f.PushHook(func() iface.Client {
		return r0
	})
}

func (f *ClientReadReplicaFunc) nextHook() func() iface.Client {
	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

// History returns a sequence of ClientReadReplicaFuncCall objects
// describing the invocations of this function.
func (f *ClientReadReplicaFunc) History() []ClientReadReplicaFuncCall {
	return f.history
}

// ClientReadReplicaFuncCall is an object that describes an invocation of
// method ReadReplica on an instance of MockClient.
type ClientReadReplicaFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 iface.Client
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ClientReadReplicaFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ClientReadReplicaFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

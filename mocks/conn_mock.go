// Code generated by github.com/efritz/go-mockgen; DO NOT EDIT.
// This file was generated by robots at
// 2018-10-23T15:57:11-05:00
// using the command
// $ go-mockgen -f github.com/efritz/deepjoy/iface

package mocks

import iface "github.com/efritz/deepjoy/iface"

// MockConn is a mock impelementation of the Conn interface (from the
// package github.com/efritz/deepjoy/iface) used for unit testing.
type MockConn struct {
	// CloseFunc is an instance of a mock function object controlling the
	// behavior of the method Close.
	CloseFunc *ConnCloseFunc
	// DoFunc is an instance of a mock function object controlling the
	// behavior of the method Do.
	DoFunc *ConnDoFunc
	// SendFunc is an instance of a mock function object controlling the
	// behavior of the method Send.
	SendFunc *ConnSendFunc
}

// NewMockConn creates a new mock of the Conn interface. All methods return
// zero values for all results, unless overwritten.
func NewMockConn() *MockConn {
	return &MockConn{
		CloseFunc: &ConnCloseFunc{
			defaultHook: func() error {
				return nil
			},
		},
		DoFunc: &ConnDoFunc{
			defaultHook: func(string, ...interface{}) (interface{}, error) {
				return nil, nil
			},
		},
		SendFunc: &ConnSendFunc{
			defaultHook: func(string, ...interface{}) error {
				return nil
			},
		},
	}
}

// NewMockConnFrom creates a new mock of the MockConn interface. All methods
// delegate to the given implementation, unless overwritten.
func NewMockConnFrom(i iface.Conn) *MockConn {
	return &MockConn{
		CloseFunc: &ConnCloseFunc{
			defaultHook: i.Close,
		},
		DoFunc: &ConnDoFunc{
			defaultHook: i.Do,
		},
		SendFunc: &ConnSendFunc{
			defaultHook: i.Send,
		},
	}
}

// ConnCloseFunc describes the behavior when the Close method of the parent
// MockConn instance is invoked.
type ConnCloseFunc struct {
	defaultHook func() error
	hooks       []func() error
	history     []ConnCloseFuncCall
}

// Close delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockConn) Close() error {
	r0 := m.CloseFunc.nextHook()()
	m.CloseFunc.history = append(m.CloseFunc.history, ConnCloseFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Close method of the
// parent MockConn instance is invoked and the hook queue is empty.
func (f *ConnCloseFunc) SetDefaultHook(hook func() error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Close method of the parent MockConn instance inovkes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *ConnCloseFunc) PushHook(hook func() error) {
	f.hooks = append(f.hooks, hook)
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ConnCloseFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func() error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ConnCloseFunc) PushReturn(r0 error) {
	f.PushHook(func() error {
		return r0
	})
}

func (f *ConnCloseFunc) nextHook() func() error {
	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

// History returns a sequence of ConnCloseFuncCall objects describing the
// invocations of this function.
func (f *ConnCloseFunc) History() []ConnCloseFuncCall {
	return f.history
}

// ConnCloseFuncCall is an object that describes an invocation of method
// Close on an instance of MockConn.
type ConnCloseFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ConnCloseFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ConnCloseFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ConnDoFunc describes the behavior when the Do method of the parent
// MockConn instance is invoked.
type ConnDoFunc struct {
	defaultHook func(string, ...interface{}) (interface{}, error)
	hooks       []func(string, ...interface{}) (interface{}, error)
	history     []ConnDoFuncCall
}

// Do delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockConn) Do(v0 string, v1 ...interface{}) (interface{}, error) {
	r0, r1 := m.DoFunc.nextHook()(v0, v1...)
	m.DoFunc.history = append(m.DoFunc.history, ConnDoFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Do method of the
// parent MockConn instance is invoked and the hook queue is empty.
func (f *ConnDoFunc) SetDefaultHook(hook func(string, ...interface{}) (interface{}, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Do method of the parent MockConn instance inovkes the hook at the front
// of the queue and discards it. After the queue is empty, the default hook
// function is invoked for any future action.
func (f *ConnDoFunc) PushHook(hook func(string, ...interface{}) (interface{}, error)) {
	f.hooks = append(f.hooks, hook)
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ConnDoFunc) SetDefaultReturn(r0 interface{}, r1 error) {
	f.SetDefaultHook(func(string, ...interface{}) (interface{}, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ConnDoFunc) PushReturn(r0 interface{}, r1 error) {
	f.PushHook(func(string, ...interface{}) (interface{}, error) {
		return r0, r1
	})
}

func (f *ConnDoFunc) nextHook() func(string, ...interface{}) (interface{}, error) {
	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

// History returns a sequence of ConnDoFuncCall objects describing the
// invocations of this function.
func (f *ConnDoFunc) History() []ConnDoFuncCall {
	return f.history
}

// ConnDoFuncCall is an object that describes an invocation of method Do on
// an instance of MockConn.
type ConnDoFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []interface{}
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 interface{}
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c ConnDoFuncCall) Args() []interface{} {
	return append([]interface{}{c.Arg0}, c.Arg1...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ConnDoFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ConnSendFunc describes the behavior when the Send method of the parent
// MockConn instance is invoked.
type ConnSendFunc struct {
	defaultHook func(string, ...interface{}) error
	hooks       []func(string, ...interface{}) error
	history     []ConnSendFuncCall
}

// Send delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockConn) Send(v0 string, v1 ...interface{}) error {
	r0 := m.SendFunc.nextHook()(v0, v1...)
	m.SendFunc.history = append(m.SendFunc.history, ConnSendFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Send method of the
// parent MockConn instance is invoked and the hook queue is empty.
func (f *ConnSendFunc) SetDefaultHook(hook func(string, ...interface{}) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Send method of the parent MockConn instance inovkes the hook at the front
// of the queue and discards it. After the queue is empty, the default hook
// function is invoked for any future action.
func (f *ConnSendFunc) PushHook(hook func(string, ...interface{}) error) {
	f.hooks = append(f.hooks, hook)
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ConnSendFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(string, ...interface{}) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ConnSendFunc) PushReturn(r0 error) {
	f.PushHook(func(string, ...interface{}) error {
		return r0
	})
}

func (f *ConnSendFunc) nextHook() func(string, ...interface{}) error {
	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

// History returns a sequence of ConnSendFuncCall objects describing the
// invocations of this function.
func (f *ConnSendFunc) History() []ConnSendFuncCall {
	return f.history
}

// ConnSendFuncCall is an object that describes an invocation of method Send
// on an instance of MockConn.
type ConnSendFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []interface{}
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c ConnSendFuncCall) Args() []interface{} {
	return append([]interface{}{c.Arg0}, c.Arg1...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ConnSendFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

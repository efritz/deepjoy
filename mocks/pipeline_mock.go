// Code generated by github.com/efritz/go-mockgen; DO NOT EDIT.
// This file was generated by robots at
// 2018-10-23T15:57:11-05:00
// using the command
// $ go-mockgen -f github.com/efritz/deepjoy/iface

package mocks

import iface "github.com/efritz/deepjoy/iface"

// MockPipeline is a mock impelementation of the Pipeline interface (from
// the package github.com/efritz/deepjoy/iface) used for unit testing.
type MockPipeline struct {
	// AddFunc is an instance of a mock function object controlling the
	// behavior of the method Add.
	AddFunc *PipelineAddFunc
	// RunFunc is an instance of a mock function object controlling the
	// behavior of the method Run.
	RunFunc *PipelineRunFunc
}

// NewMockPipeline creates a new mock of the Pipeline interface. All methods
// return zero values for all results, unless overwritten.
func NewMockPipeline() *MockPipeline {
	return &MockPipeline{
		AddFunc: &PipelineAddFunc{
			defaultHook: func(string, ...interface{}) {
				return
			},
		},
		RunFunc: &PipelineRunFunc{
			defaultHook: func() (interface{}, error) {
				return nil, nil
			},
		},
	}
}

// NewMockPipelineFrom creates a new mock of the MockPipeline interface. All
// methods delegate to the given implementation, unless overwritten.
func NewMockPipelineFrom(i iface.Pipeline) *MockPipeline {
	return &MockPipeline{
		AddFunc: &PipelineAddFunc{
			defaultHook: i.Add,
		},
		RunFunc: &PipelineRunFunc{
			defaultHook: i.Run,
		},
	}
}

// PipelineAddFunc describes the behavior when the Add method of the parent
// MockPipeline instance is invoked.
type PipelineAddFunc struct {
	defaultHook func(string, ...interface{})
	hooks       []func(string, ...interface{})
	history     []PipelineAddFuncCall
}

// Add delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockPipeline) Add(v0 string, v1 ...interface{}) {
	m.AddFunc.nextHook()(v0, v1...)
	m.AddFunc.history = append(m.AddFunc.history, PipelineAddFuncCall{v0, v1})
	return
}

// SetDefaultHook sets function that is called when the Add method of the
// parent MockPipeline instance is invoked and the hook queue is empty.
func (f *PipelineAddFunc) SetDefaultHook(hook func(string, ...interface{})) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Add method of the parent MockPipeline instance inovkes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *PipelineAddFunc) PushHook(hook func(string, ...interface{})) {
	f.hooks = append(f.hooks, hook)
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *PipelineAddFunc) SetDefaultReturn() {
	f.SetDefaultHook(func(string, ...interface{}) {
		return
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *PipelineAddFunc) PushReturn() {
	f.PushHook(func(string, ...interface{}) {
		return
	})
}

func (f *PipelineAddFunc) nextHook() func(string, ...interface{}) {
	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

// History returns a sequence of PipelineAddFuncCall objects describing the
// invocations of this function.
func (f *PipelineAddFunc) History() []PipelineAddFuncCall {
	return f.history
}

// PipelineAddFuncCall is an object that describes an invocation of method
// Add on an instance of MockPipeline.
type PipelineAddFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []interface{}
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c PipelineAddFuncCall) Args() []interface{} {
	return append([]interface{}{c.Arg0}, c.Arg1...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PipelineAddFuncCall) Results() []interface{} {
	return []interface{}{}
}

// PipelineRunFunc describes the behavior when the Run method of the parent
// MockPipeline instance is invoked.
type PipelineRunFunc struct {
	defaultHook func() (interface{}, error)
	hooks       []func() (interface{}, error)
	history     []PipelineRunFuncCall
}

// Run delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockPipeline) Run() (interface{}, error) {
	r0, r1 := m.RunFunc.nextHook()()
	m.RunFunc.history = append(m.RunFunc.history, PipelineRunFuncCall{r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Run method of the
// parent MockPipeline instance is invoked and the hook queue is empty.
func (f *PipelineRunFunc) SetDefaultHook(hook func() (interface{}, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Run method of the parent MockPipeline instance inovkes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *PipelineRunFunc) PushHook(hook func() (interface{}, error)) {
	f.hooks = append(f.hooks, hook)
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *PipelineRunFunc) SetDefaultReturn(r0 interface{}, r1 error) {
	f.SetDefaultHook(func() (interface{}, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *PipelineRunFunc) PushReturn(r0 interface{}, r1 error) {
	f.PushHook(func() (interface{}, error) {
		return r0, r1
	})
}

func (f *PipelineRunFunc) nextHook() func() (interface{}, error) {
	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

// History returns a sequence of PipelineRunFuncCall objects describing the
// invocations of this function.
func (f *PipelineRunFunc) History() []PipelineRunFuncCall {
	return f.history
}

// PipelineRunFuncCall is an object that describes an invocation of method
// Run on an instance of MockPipeline.
type PipelineRunFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 interface{}
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c PipelineRunFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c PipelineRunFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}
